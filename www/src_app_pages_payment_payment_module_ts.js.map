{"version":3,"file":"src_app_pages_payment_payment_module_ts.js","mappings":"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","sources":["./src/app/pages/payment/payment-routing.module.ts","./src/app/pages/payment/payment.module.ts","./src/app/pages/payment/payment.page.ts","./src/app/pages/payment/payment.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PaymentPage } from './payment.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PaymentPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PaymentPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PaymentPageRoutingModule } from './payment-routing.module';\n\nimport { PaymentPage } from './payment.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    PaymentPageRoutingModule\n  ],\n  declarations: [PaymentPage]\n})\nexport class PaymentPageModule {}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertController, LoadingController } from '@ionic/angular';\nimport { PaymentService } from '../../services/payment.service';\nimport { AvatarService } from '../../services/avatar.service';\nimport { Router } from '@angular/router';\nimport { Card } from 'src/app/interfaces/card';\n\ndeclare var Stripe: any;\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.page.html',\n  styleUrls: ['./payment.page.scss'],\n})\nexport class PaymentPage implements OnInit, AfterViewInit {\n  @ViewChild('cardElement', { static: false }) cardElement: ElementRef;\n  paymentForm: FormGroup;\n  loading: HTMLIonLoadingElement;\n  stripe: any;\n  elements: any;\n  card: any;\n  approve: boolean = false;\n  cardInitialized: boolean = false;\n  selectedProvider: string = '';\n  savedPaymentMethods: Card[] = [];\n  selectedCardId: string = '';\n  defaultAmount: number = 1000;\n  isCardComplete: boolean = false; // New state for card completion\n\n  constructor(\n    private fb: FormBuilder,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private paymentService: PaymentService,\n    private avatarService: AvatarService,\n    private router: Router\n  ) {\n    this.paymentForm = this.fb.group({\n      provider: ['', Validators.required],\n      cardId: [''],\n      authCode: ['']\n    });\n  }\n\n  ngOnInit() {\n    this.fetchSavedPaymentMethods();\n    this.onPaymentProviderChange('stripe');\n    this.getActiveCard();\n  }\n\n  ngAfterViewInit() {}\n\n  // Ensure Stripe card is initialized\n  initializeStripeCard() {\n    if (this.cardElement && this.cardElement.nativeElement) {\n      this.stripe = Stripe('pk_test_0t85o0Llo0MbBfC9imSzznam');\n      this.elements = this.stripe.elements();\n      if (!this.card) {\n        this.card = this.elements.create('card');\n        this.card.mount(this.cardElement.nativeElement);\n        // Listen for changes on the card input\n        this.card.on('change', event => {\n          this.isCardComplete = event.complete;\n        });\n      }\n      this.cardInitialized = true;\n    }\n  }\n\n  onPaymentProviderChange(provider: string) {\n    this.selectedProvider = provider;\n    this.paymentForm.patchValue({ provider });\n\n    if (provider === 'stripe') {\n      setTimeout(() => {\n        this.initializeStripeCard();\n      }, 0);\n    }\n  }\n\n  async fetchSavedPaymentMethods() {\n    try {\n      this.savedPaymentMethods = await this.avatarService.getSavedPaymentMethods();\n      console.log('Saved Payment Methods:', this.savedPaymentMethods);\n      if (this.savedPaymentMethods.length > 0) {\n        this.selectedCardId = this.savedPaymentMethods[0].cardId; // Set default selected card\n      }\n    } catch (error) {\n      console.error('Error fetching saved payment methods:', error);\n    }\n  }\n\n  async getActiveCard() {\n    const email = this.avatarService.user.email;\n    this.avatarService.getActiveCard(email).subscribe((data: any) => {\n      if (data && data.activeCardId) {\n        this.selectedCardId = data.activeCardId;\n      }\n    });\n  }\n\n  async setActiveCard(event: any) {\n    const cardId = event.detail.value;\n    if (cardId) {\n      try {\n        const email = this.avatarService.user.email;\n        await this.avatarService.setActiveCard(email, cardId);\n        this.selectedCardId = cardId;\n      } catch (error) {\n        console.error('Error setting active card:', error);\n      }\n    }\n  }\n\n  async processPayment() {\n    if (this.paymentForm.valid) {\n      const formValues = this.paymentForm.value;\n      formValues.email = this.avatarService.user.email; // Use email from avatarService\n  \n      this.showLoading();\n  \n      try {\n        let paymentResult;\n        paymentResult = await this.processStripePayment(formValues);\n\n        console.log('Payment successful:', paymentResult);\n        await this.showAlert('Success', 'Payment successful!');\n        await this.avatarService.updateFirestoreAfterPayment(paymentResult);\n  \n      } catch (error) {\n        console.error('Error during payment:', error);\n        const errorMessage = error.error ? error.error.error : 'An unexpected error occurred.';\n        await this.showAlert('Error', `Payment failed: ${errorMessage}`);\n      } finally {\n        this.hideLoading();\n        this.approve = false;\n      }\n    } else {\n      this.showAlert('Form Error', 'Please fill out all required fields.');\n    }\n  }\n\n  async processStripePayment(formValues) {\n    console.log('Starting processStripePayment with formValues:', formValues);\n  \n    try {\n      const setupIntentResponse = await this.paymentService.createSetupIntent(formValues.email).toPromise();\n      const clientSecret = setupIntentResponse.client_secret;\n      console.log('Setup Intent created:', setupIntentResponse);\n  \n      const { setupIntent, error } = await this.stripe.confirmCardSetup(\n        clientSecret,\n        {\n          payment_method: {\n            card: this.card,\n            billing_details: {\n              email: formValues.email,\n            },\n          },\n        }\n      );\n  \n      if (error) {\n        const errorElement = document.getElementById('card-errors');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n        }\n        await this.showAlert('Payment Error', error.message);\n        this.approve = false;\n        console.error('Error confirming card setup:', error);\n        throw new Error(error.message);\n      }\n  \n      console.log('Card setup confirmed:', setupIntent);\n  \n      const paymentMethodId = setupIntent.payment_method;\n  \n      // Fetch the payment method details from your server (which will call Stripe)\n      const paymentMethod = await this.paymentService.retrievePaymentMethod(paymentMethodId).toPromise();\n      console.log('Payment method retrieved:', paymentMethod);\n  \n      const cardDetails = paymentMethod.card;\n      const last4 = cardDetails.last4;\n  \n      console.log('Checking if card exists with email:', formValues.email, ' and last4:', last4);\n      const cardExists = await this.avatarService.checkCardExistsStripe(formValues.email, last4);\n      if (!cardExists) {\n        await this.avatarService.addCardStripe(formValues.email, paymentMethodId, last4);\n        await this.fetchSavedPaymentMethods();\n      }\n  \n      return this.paymentService.savePaymentMethod(formValues.email, paymentMethodId).toPromise();\n  \n    } catch (error) {\n      console.error('Error in processStripePayment:', error);\n      throw error;\n    }\n  }\n  \n  async deletePaymentMethod(cardId: string) {\n    await this.avatarService.deleteSavedPaymentMethod(cardId);\n    this.fetchSavedPaymentMethods(); // Refresh the list of saved payment methods\n  }\n\n  async showLoading() {\n    this.loading = await this.loadingController.create({\n      message: 'Processing payment...',\n    });\n    await this.loading.present();\n  }\n\n  async hideLoading() {\n    if (this.loading) {\n      await this.loading.dismiss();\n    }\n  }\n\n  async showAlert(header: string, message: string) {\n    const alert = await this.alertController.create({\n      header,\n      message,\n      buttons: ['OK'],\n    });\n    await alert.present();\n  }\n}\n","<ion-header class=\"ion-no-border\" [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button color=\"primary\">\n        <ion-back-button></ion-back-button>\n      </ion-button>\n    </ion-buttons>\n    <ion-title>Payment</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-text-center ion-padding\">\n  <ion-card class=\"ion-no-border no-shadow\">\n    <ion-card-content class=\"no-shadow\">\n      <div class=\"payment-details\" [ngClass]=\"{'slide-down': selectedProvider !== ''}\">\n        <form [formGroup]=\"paymentForm\" (ngSubmit)=\"processPayment()\">\n          <div *ngIf=\"selectedProvider === 'stripe'\">\n            <div #cardElement class=\"stripe-element\"></div>\n            <div id=\"card-errors\" role=\"alert\"></div>\n          </div>\n          <ion-button color=\"success\" shape=\"round\" expand=\"block\" size=\"large\" type=\"submit\" \n          [disabled]=\"!paymentForm.valid || !isCardComplete\">\n          Add Card\n        </ion-button>\n        </form>\n      </div>\n    </ion-card-content>\n  </ion-card>\n\n  <ion-card *ngIf=\"savedPaymentMethods.length > 0\" class=\"no-shadow\">\n    <ion-card-header>\n      <ion-card-title>Saved Payment Methods</ion-card-title>\n    </ion-card-header>\n    <ion-card-content class=\"no-shadow\">\n      <ion-radio-group [(ngModel)]=\"selectedCardId\" (ionChange)=\"setActiveCard($event)\">\n        <ion-item *ngFor=\"let method of savedPaymentMethods\">\n          <ion-label>{{ method.last4 }}</ion-label>\n          <ion-radio slot=\"start\" [value]=\"method.cardId\"></ion-radio>\n          <ion-button slot=\"end\" color=\"danger\" (click)=\"deletePaymentMethod(method.cardId)\">\n            Delete\n          </ion-button>\n        </ion-item>\n      </ion-radio-group>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n"],"names":["ElementRef","Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵlistener","PaymentPage_ion_card_15_ion_item_6_Template_ion_button_click_4_listener","restoredCtx","ɵɵrestoreView","_r6","method_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","deletePaymentMethod","cardId","ɵɵadvance","ɵɵtextInterpolate","last4","ɵɵproperty","PaymentPage_ion_card_15_Template_ion_radio_group_ngModelChange_5_listener","$event","_r8","ctx_r7","selectedCardId","PaymentPage_ion_card_15_Template_ion_radio_group_ionChange_5_listener","ctx_r9","setActiveCard","ɵɵtemplate","PaymentPage_ion_card_15_ion_item_6_Template","ctx_r1","savedPaymentMethods","PaymentPage","constructor","fb","alertController","loadingController","paymentService","avatarService","router","approve","cardInitialized","selectedProvider","defaultAmount","isCardComplete","paymentForm","group","provider","required","authCode","ngOnInit","fetchSavedPaymentMethods","onPaymentProviderChange","getActiveCard","ngAfterViewInit","initializeStripeCard","cardElement","nativeElement","stripe","Stripe","elements","card","create","mount","on","event","complete","patchValue","setTimeout","_this","_asyncToGenerator","getSavedPaymentMethods","console","log","length","error","_this2","email","user","subscribe","data","activeCardId","_this3","detail","value","processPayment","_this4","valid","formValues","showLoading","paymentResult","processStripePayment","showAlert","updateFirestoreAfterPayment","errorMessage","hideLoading","_this5","setupIntentResponse","createSetupIntent","toPromise","clientSecret","client_secret","setupIntent","confirmCardSetup","payment_method","billing_details","errorElement","document","getElementById","textContent","message","Error","paymentMethodId","paymentMethod","retrievePaymentMethod","cardDetails","cardExists","checkCardExistsStripe","addCardStripe","savePaymentMethod","_this6","deleteSavedPaymentMethod","_this7","loading","present","_this8","dismiss","header","_this9","alert","buttons","ɵɵdirectiveInject","i1","FormBuilder","i2","AlertController","LoadingController","i3","PaymentService","i4","AvatarService","i5","Router","selectors","viewQuery","PaymentPage_Query","rf","ctx","PaymentPage_Template_form_ngSubmit_11_listener","PaymentPage_div_12_Template","PaymentPage_ion_card_15_Template","ɵɵpureFunction1","_c1"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}